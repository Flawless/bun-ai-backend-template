name: Main Branch Protection

on:
  push:
    branches: [main, master]

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  validate-production:
    name: Production Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install Dependencies
        run: bun install --frozen-lockfile --ignore-scripts

      - name: Type Check
        run: bun run type-check

      - name: Lint Code
        run: bun run lint

      - name: Check Formatting
        run: bun run format:check

      - name: Run All Tests
        run: bun run test

      - name: Test Coverage
        run: bun run test:coverage

      - name: Validate All
        run: bun run validate:all

      - name: Build for Production
        run: bun run build

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: dist/
          retention-days: 30

  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Dependencies
        run: bun install --frozen-lockfile --ignore-scripts

      - name: Run Security Audit
        run: bun audit

      - name: Run SAST Analysis
        run: bun run lint --format json > security-report.json || true

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-analysis
          path: security-report.json
          retention-days: 90

  code-quality:
    name: Code Quality Metrics
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Dependencies
        run: bun install --frozen-lockfile --ignore-scripts

      - name: Generate Coverage Report
        run: |
          bun run test:coverage
          echo "## Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f coverage/coverage-summary.json ]; then
            echo '```json' >> $GITHUB_STEP_SUMMARY
            cat coverage/coverage-summary.json | jq '.total' >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check Coverage Thresholds
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            LINES=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
            BRANCHES=$(cat coverage/coverage-summary.json | jq '.total.branches.pct')
            
            if (( $(echo "$LINES < 80" | bc -l) )) || (( $(echo "$BRANCHES < 80" | bc -l) )); then
              echo "❌ Coverage below 80% threshold"
              echo "Lines: $LINES%"
              echo "Branches: $BRANCHES%"
              exit 1
            else
              echo "✅ Coverage meets requirements"
              echo "Lines: $LINES%"
              echo "Branches: $BRANCHES%"
            fi
          fi

  performance-benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Dependencies
        run: bun install --frozen-lockfile --ignore-scripts

      - name: Build Application
        run: bun run build

      - name: Run Performance Tests
        run: |
          # Test with production build
          PORT=8080 bun run start &
          SERVER_PID=$!
          sleep 5

          echo "## Performance Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Health check
          HEALTH_START=$(date +%s%N)
          curl -f http://localhost:8080/health
          HEALTH_END=$(date +%s%N)
          HEALTH_TIME=$((($HEALTH_END - $HEALTH_START) / 1000000))
          echo "- Health endpoint: ${HEALTH_TIME}ms" >> $GITHUB_STEP_SUMMARY

          # Readiness check
          READY_START=$(date +%s%N)
          curl -f http://localhost:8080/ready
          READY_END=$(date +%s%N)
          READY_TIME=$((($READY_END - $READY_START) / 1000000))
          echo "- Ready endpoint: ${READY_TIME}ms" >> $GITHUB_STEP_SUMMARY

          kill $SERVER_PID

      - name: Check Bundle Size
        run: |
          echo "## Bundle Size Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          du -sh dist/* 2>/dev/null || echo "No dist directory found" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  tag-release:
    name: Tag Release
    runs-on: ubuntu-latest
    needs: [validate-production, security-scan, code-quality, performance-benchmark]
    if: success()

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Version from package.json
        id: version
        run: |
          VERSION=$(cat package.json | jq -r '.version')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Git Tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag -a v${{ steps.version.outputs.version }}-build-${{ github.run_number }} -m "Automated build ${{ github.run_number }}"
          git push origin v${{ steps.version.outputs.version }}-build-${{ github.run_number }} || true

  notify-success:
    name: Success Notification
    runs-on: ubuntu-latest
    needs: [tag-release]
    if: success()

    steps:
      - name: Summary
        run: |
          echo "## 🎉 Main Branch Build Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ All quality gates passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Security scans completed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Performance benchmarks recorded" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Production build created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Build: #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
