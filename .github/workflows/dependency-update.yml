name: Dependency Updates

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of update to perform'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - all

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  check-updates:
    name: Check for Updates
    runs-on: ubuntu-latest

    outputs:
      has_updates: ${{ steps.check.outputs.has_updates }}
      update_summary: ${{ steps.check.outputs.summary }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Check for Available Updates
        id: check
        run: |
          echo "## Dependency Update Check" > update-report.md
          echo "" >> update-report.md

          # Check for outdated packages
          bun update --dry-run > outdated.txt 2>&1 || true

          if grep -q "would update" outdated.txt; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "### Available Updates:" >> update-report.md
            echo '```' >> update-report.md
            cat outdated.txt >> update-report.md
            echo '```' >> update-report.md
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "All dependencies are up to date!" >> update-report.md
          fi

          # Save summary
          SUMMARY=$(cat update-report.md)
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload Update Report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-update-report
          path: update-report.md
          retention-days: 7

  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    needs: check-updates
    if: needs.check-updates.outputs.has_updates == 'true'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Update Dependencies
        run: |
          UPDATE_TYPE="${{ github.event.inputs.update_type || 'patch' }}"

          case $UPDATE_TYPE in
            patch)
              echo "Updating patch versions only..."
              bun update --save
              ;;
            minor)
              echo "Updating minor versions..."
              bun update --save
              ;;
            major)
              echo "Updating major versions..."
              bun update --save --latest
              ;;
            all)
              echo "Updating all dependencies..."
              bun update --save --latest
              ;;
          esac

      - name: Run Quality Checks
        id: quality
        continue-on-error: true
        run: |
          # Install updated dependencies
          bun install --ignore-scripts

          # Run quality checks
          echo "Running type check..."
          bun run type-check || echo "type_check_failed=true" >> $GITHUB_ENV

          echo "Running lint..."
          bun run lint || echo "lint_failed=true" >> $GITHUB_ENV

          echo "Running tests..."
          bun run test || echo "tests_failed=true" >> $GITHUB_ENV

      - name: Create Update Branch
        id: branch
        run: |
          BRANCH_NAME="deps/update-$(date +%Y%m%d-%H%M%S)"
          git checkout -b $BRANCH_NAME

          # Commit changes
          git add package.json bun.lockb
          git commit -m "chore(deps): update dependencies

          Update type: ${{ github.event.inputs.update_type || 'patch' }}
          Date: $(date +%Y-%m-%d)
          " || echo "No changes to commit"

          # Push branch
          git push origin $BRANCH_NAME
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        uses: actions/github-script@v7
        with:
          script: |
            const branch = '${{ steps.branch.outputs.branch_name }}';
            const updateType = '${{ github.event.inputs.update_type || 'patch' }}';

            let body = `## 📦 Automated Dependency Update\n\n`;
            body += `**Update Type:** ${updateType}\n\n`;
            body += `${{ needs.check-updates.outputs.update_summary }}\n\n`;

            body += `### Quality Check Results\n\n`;

            if ('${{ env.type_check_failed }}' === 'true') {
              body += `- ❌ Type check failed\n`;
            } else {
              body += `- ✅ Type check passed\n`;
            }

            if ('${{ env.lint_failed }}' === 'true') {
              body += `- ❌ Lint check failed\n`;
            } else {
              body += `- ✅ Lint check passed\n`;
            }

            if ('${{ env.tests_failed }}' === 'true') {
              body += `- ❌ Tests failed\n`;
            } else {
              body += `- ✅ Tests passed\n`;
            }

            body += `\n### Next Steps\n\n`;
            body += `1. Review the changes in \`package.json\` and \`bun.lockb\`\n`;
            body += `2. Check for any breaking changes in the updated packages\n`;
            body += `3. Fix any failing quality checks if needed\n`;
            body += `4. Merge when ready\n`;

            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `chore(deps): ${updateType} dependency updates`,
              head: branch,
              base: 'main',
              body: body,
              labels: ['dependencies', 'automated']
            });

            console.log(`Pull request created: ${pr.data.html_url}`);

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: check-updates

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Dependencies
        run: bun install --frozen-lockfile --ignore-scripts

      - name: Run Security Audit
        id: audit
        run: |
          echo "## Security Audit Report" > security-audit.md
          echo "" >> security-audit.md
          echo "Date: $(date)" >> security-audit.md
          echo "" >> security-audit.md

          # Run audit
          bun audit 2>&1 | tee audit-output.txt || true

          if grep -q "found 0 vulnerabilities" audit-output.txt; then
            echo "✅ No vulnerabilities found" >> security-audit.md
            echo "has_vulnerabilities=false" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Vulnerabilities detected:" >> security-audit.md
            echo '```' >> security-audit.md
            cat audit-output.txt >> security-audit.md
            echo '```' >> security-audit.md
            echo "has_vulnerabilities=true" >> $GITHUB_OUTPUT
          fi

      - name: Check License Compliance
        run: |
          echo "" >> security-audit.md
          echo "## License Compliance" >> security-audit.md
          echo "" >> security-audit.md

          # Check licenses (if license-checker is available)
          if command -v license-checker &> /dev/null; then
            bun x license-checker --summary --production >> security-audit.md 2>&1 || true
          else
            echo "License checker not available" >> security-audit.md
          fi

      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-report
          path: security-audit.md
          retention-days: 30

      - name: Create Issue if Vulnerabilities Found
        if: steps.audit.outputs.has_vulnerabilities == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const date = new Date().toISOString().split('T')[0];

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Security Alert: Vulnerabilities detected - ${date}`,
              body: `## ⚠️ Security Vulnerabilities Detected\n\nThe automated security audit has detected vulnerabilities in the project dependencies.\n\nPlease review the [security audit report](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) and take appropriate action.\n\n**Priority:** High\n**Date:** ${date}`,
              labels: ['security', 'high-priority', 'automated']
            });

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [check-updates, security-audit]
    if: always()

    steps:
      - name: Generate Summary
        run: |
          echo "## 📊 Dependency Management Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Run Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Run Type:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.check-updates.outputs.has_updates }}" == "true" ]; then
            echo "### 📦 Updates Available" >> $GITHUB_STEP_SUMMARY
            echo "Dependencies have been updated and a PR has been created for review." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ✅ Dependencies Up to Date" >> $GITHUB_STEP_SUMMARY
            echo "No dependency updates are currently available." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔒 Security Status" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.security-audit.outputs.has_vulnerabilities }}" == "true" ]; then
            echo "⚠️ Vulnerabilities detected - review required" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No known vulnerabilities" >> $GITHUB_STEP_SUMMARY
          fi
