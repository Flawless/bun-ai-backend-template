name: Docker Build and Push

on:
  push:
    branches: [main, master]
    tags:
      - 'v*'
  pull_request:
    branches: [main, master, develop]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: test-image:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Run container in background
          docker run -d \
            --name test-container \
            -p 9090:3000 \
            -e PORT=3000 \
            -e NODE_ENV=production \
            test-image:latest
            
          # Wait for container to be healthy
          for i in {1..30}; do
            if docker exec test-container curl -f http://localhost:3000/health; then
              echo "Container is healthy"
              break
            fi
            echo "Waiting for container to be healthy... ($i/30)"
            sleep 2
          done

          # Test endpoints from host
          echo "Testing health endpoint..."
          curl -f http://localhost:9090/health | jq '.'

          echo "Testing ready endpoint..."
          curl -f http://localhost:9090/ready | jq '.'

          echo "Testing root endpoint..."
          curl -f http://localhost:9090/ | jq '.'

          # Check container logs
          echo "Container logs:"
          docker logs test-container

          # Clean up
          docker stop test-container
          docker rm test-container

      - name: Run security scan on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: test-image:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Build and push Docker image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate SBOM
        if: github.event_name != 'pull_request'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM as artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json
          retention-days: 30

  build-dev-image:
    name: Build Development Docker Image
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Dev Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.dev
          push: false
          load: true
          tags: test-dev-image:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Dev Docker image
        run: |
          # Run dev container
          docker run -d \
            --name test-dev-container \
            -p 9091:3000 \
            -e PORT=3000 \
            -e NODE_ENV=development \
            test-dev-image:latest
            
          # Wait for container to be healthy
          sleep 10

          # Test endpoints
          echo "Testing dev health endpoint..."
          curl -f http://localhost:9091/health | jq '.'

          # Check logs
          docker logs test-dev-container

          # Clean up
          docker stop test-dev-container
          docker rm test-dev-container
